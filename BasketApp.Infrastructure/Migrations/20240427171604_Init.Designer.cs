// <auto-generated />
using System;
using BasketApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BasketApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240427171604_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BasketApp.Core.Domain.BasketAggregate.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<int?>("timeslot_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("timeslot_id");

                    b.ToTable("baskets", (string)null);
                });

            modelBuilder.Entity("BasketApp.Core.Domain.BasketAggregate.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BasketId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("basket_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("GoodId")
                        .HasColumnType("uuid")
                        .HasColumnName("good_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("BasketApp.Core.Domain.BasketAggregate.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int>("End")
                        .HasColumnType("integer")
                        .HasColumnName("end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Start")
                        .HasColumnType("integer")
                        .HasColumnName("start");

                    b.HasKey("Id");

                    b.ToTable("time_slots", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = 12,
                            Name = "morning",
                            Start = 6
                        },
                        new
                        {
                            Id = 2,
                            End = 17,
                            Name = "midday",
                            Start = 12
                        },
                        new
                        {
                            Id = 3,
                            End = 24,
                            Name = "evening",
                            Start = 17
                        },
                        new
                        {
                            Id = 4,
                            End = 6,
                            Name = "night",
                            Start = 0
                        });
                });

            modelBuilder.Entity("BasketApp.Core.Domain.GoodAggregate.Good", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("goods", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec85ceee-f186-4e9c-a4dd-2929e69e586c"),
                            Description = "Описание хлеба",
                            Price = 100m,
                            Title = "Хлеб"
                        },
                        new
                        {
                            Id = new Guid("e8cb8a0b-d302-485a-801c-5fb50aced4d5"),
                            Description = "Описание молока",
                            Price = 200m,
                            Title = "Молоко"
                        },
                        new
                        {
                            Id = new Guid("a1d48be9-4c98-4371-97c0-064bde03874e"),
                            Description = "Описание яиц",
                            Price = 300m,
                            Title = "Яйца"
                        },
                        new
                        {
                            Id = new Guid("34b1e64a-6471-44a0-8c4a-e5d21584a76c"),
                            Description = "Описание колбасы",
                            Price = 400m,
                            Title = "Колбаса"
                        },
                        new
                        {
                            Id = new Guid("292dc3c5-2bdd-4e0c-bd75-c5e8b07a8792"),
                            Description = "Описание кофе",
                            Price = 500m,
                            Title = "Кофе"
                        },
                        new
                        {
                            Id = new Guid("a3fcc8e1-d2a3-4bd6-9421-c82019e21c2d"),
                            Description = "Описание сахара",
                            Price = 600m,
                            Title = "Сахар"
                        });
                });

            modelBuilder.Entity("BasketApp.Infrastructure.Entities.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccuredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occuredOnUtc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ProcessedOnUtc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("outbox", (string)null);
                });

            modelBuilder.Entity("BasketApp.Core.Domain.BasketAggregate.Basket", b =>
                {
                    b.HasOne("BasketApp.Core.Domain.BasketAggregate.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("timeslot_id");

                    b.OwnsOne("BasketApp.Core.Domain.BasketAggregate.Status", "Status", b1 =>
                        {
                            b1.Property<Guid>("BasketId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("status");

                            b1.HasKey("BasketId");

                            b1.ToTable("baskets");

                            b1.WithOwner()
                                .HasForeignKey("BasketId");
                        });

                    b.OwnsOne("BasketApp.Core.Domain.SharedKernel.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BasketId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Apartment")
                                .HasColumnType("text")
                                .HasColumnName("address_apartment");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<string>("House")
                                .HasColumnType("text")
                                .HasColumnName("address_house");

                            b1.Property<string>("Street")
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.HasKey("BasketId");

                            b1.ToTable("baskets");

                            b1.WithOwner()
                                .HasForeignKey("BasketId");
                        });

                    b.Navigation("Address");

                    b.Navigation("Status");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("BasketApp.Core.Domain.BasketAggregate.Item", b =>
                {
                    b.HasOne("BasketApp.Core.Domain.BasketAggregate.Basket", null)
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasketApp.Core.Domain.GoodAggregate.Good", b =>
                {
                    b.OwnsOne("BasketApp.Core.Domain.SharedKernel.Weight", "Weight", b1 =>
                        {
                            b1.Property<Guid>("GoodId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("weight_gram");

                            b1.HasKey("GoodId");

                            b1.ToTable("goods");

                            b1.WithOwner()
                                .HasForeignKey("GoodId");

                            b1.HasData(
                                new
                                {
                                    GoodId = new Guid("ec85ceee-f186-4e9c-a4dd-2929e69e586c"),
                                    Value = 6
                                },
                                new
                                {
                                    GoodId = new Guid("e8cb8a0b-d302-485a-801c-5fb50aced4d5"),
                                    Value = 9
                                },
                                new
                                {
                                    GoodId = new Guid("a1d48be9-4c98-4371-97c0-064bde03874e"),
                                    Value = 8
                                },
                                new
                                {
                                    GoodId = new Guid("34b1e64a-6471-44a0-8c4a-e5d21584a76c"),
                                    Value = 4
                                },
                                new
                                {
                                    GoodId = new Guid("292dc3c5-2bdd-4e0c-bd75-c5e8b07a8792"),
                                    Value = 7
                                },
                                new
                                {
                                    GoodId = new Guid("a3fcc8e1-d2a3-4bd6-9421-c82019e21c2d"),
                                    Value = 1
                                });
                        });

                    b.Navigation("Weight");
                });

            modelBuilder.Entity("BasketApp.Core.Domain.BasketAggregate.Basket", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
