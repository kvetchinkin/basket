/*
 * Swagger Basket
 *
 * Корзина товаров
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using BasketApp.Api.Adapters.Http.Contract.src.Api.Attributes;
using BasketApp.Api.Adapters.Http.Contract.src.Api.Models;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;

namespace BasketApp.Api.Adapters.Http.Contract.src.Api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public abstract class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Добавить адрес доставки
        /// </summary>
        /// <remarks>Позволяет добавить адрес доставки</remarks>
        /// <param name="basketId">Идентификатор корзины</param>
        /// <param name="address">Адрес</param>
        /// <response code="200">Успешный ответ</response>
        /// <response code="0">Ошибка</response>
        [HttpPost]
        [Route("/api/v1/baskets/{basketId}/address/add")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddAddress")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Ошибка")]
        public abstract Task<IActionResult> AddAddress([FromRoute (Name = "basketId")][Required]Guid basketId, [FromBody]Address address);

        /// <summary>
        /// Добавить период доставки
        /// </summary>
        /// <remarks>Позволяет период доставки</remarks>
        /// <param name="basketId">Идентификатор корзины</param>
        /// <param name="body">Период доставки</param>
        /// <response code="200">Успешный ответ</response>
        /// <response code="0">Ошибка</response>
        [HttpPost]
        [Route("/api/v1/baskets/{basketId}/delivery-period/add")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddDeliveryPeriod")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Ошибка")]
        public abstract Task<IActionResult> AddDeliveryPeriod([FromRoute (Name = "basketId")][Required]Guid basketId, [FromBody]string body);

        /// <summary>
        /// Изменить позицию
        /// </summary>
        /// <remarks>Позволяет добавить/удалить/изменить позицию</remarks>
        /// <param name="basketId">Идентификатор корзины</param>
        /// <param name="item">Позиция</param>
        /// <response code="200">Успешный ответ</response>
        /// <response code="0">Ошибка</response>
        [HttpPost]
        [Route("/api/v1/baskets/{basketId}/items/change")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ChangeItems")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Ошибка")]
        public abstract Task<IActionResult> ChangeItems([FromRoute (Name = "basketId")][Required]Guid basketId, [FromBody]Item item);

        /// <summary>
        /// Оформить покупку
        /// </summary>
        /// <remarks>Позволяет оформить корзину</remarks>
        /// <param name="basketId">Идентификатор корзины</param>
        /// <response code="200">Успешный ответ</response>
        /// <response code="0">Ошибка</response>
        [HttpPost]
        [Route("/api/v1/baskets/{basketId}/checkout")]
        [ValidateModelState]
        [SwaggerOperation("Checkout")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Ошибка")]
        public abstract Task<IActionResult> Checkout([FromRoute (Name = "basketId")][Required]Guid basketId);

        /// <summary>
        /// Получить состав корзины
        /// </summary>
        /// <remarks>Позволяет получить состав корзины</remarks>
        /// <param name="basketId">Идентификатор корзины</param>
        /// <response code="200">Успешный ответ</response>
        /// <response code="0">Ошибка</response>
        [HttpGet]
        [Route("/api/v1/baskets/{basketId}/items")]
        [ValidateModelState]
        [SwaggerOperation("GetBasketItems")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Item>), description: "Успешный ответ")]
        [SwaggerResponse(statusCode: 0, type: typeof(Error), description: "Ошибка")]
        public abstract Task<IActionResult> GetBasketItems([FromRoute (Name = "basketId")][Required]Guid basketId);
    }
}
