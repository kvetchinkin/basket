/*
 * Swagger Basket
 *
 * Корзина товаров
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BasketApp.Api.Adapters.Http.Contract.src.Api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AddressAllOf : IEquatable<AddressAllOf>
    {
        /// <summary>
        /// Страна
        /// </summary>
        /// <value>Страна</value>
        [Required]
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Город
        /// </summary>
        /// <value>Город</value>
        [Required]
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Улица
        /// </summary>
        /// <value>Улица</value>
        [Required]
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Дом
        /// </summary>
        /// <value>Дом</value>
        [Required]
        [DataMember(Name="house", EmitDefaultValue=false)]
        public string House { get; set; }

        /// <summary>
        /// Квартира
        /// </summary>
        /// <value>Квартира</value>
        [Required]
        [DataMember(Name="apartment", EmitDefaultValue=false)]
        public string Apartment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressAllOf {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  House: ").Append(House).Append("\n");
            sb.Append("  Apartment: ").Append(Apartment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AddressAllOf)obj);
        }

        /// <summary>
        /// Returns true if AddressAllOf instances are equal
        /// </summary>
        /// <param name="other">Instance of AddressAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressAllOf other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    Street == other.Street ||
                    Street != null &&
                    Street.Equals(other.Street)
                ) && 
                (
                    House == other.House ||
                    House != null &&
                    House.Equals(other.House)
                ) && 
                (
                    Apartment == other.Apartment ||
                    Apartment != null &&
                    Apartment.Equals(other.Apartment)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (Street != null)
                    hashCode = hashCode * 59 + Street.GetHashCode();
                    if (House != null)
                    hashCode = hashCode * 59 + House.GetHashCode();
                    if (Apartment != null)
                    hashCode = hashCode * 59 + Apartment.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AddressAllOf left, AddressAllOf right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddressAllOf left, AddressAllOf right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
